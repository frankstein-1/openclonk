<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!DOCTYPE funcs SYSTEM "../../../clonk.dtd">
<?xml-stylesheet type="text/xsl" href="../../../clonk.xsl"?>
<funcs>
	<func>
		<title>GetValue</title>
		<category>Objekte</category><subcat>Status</subcat>
		<version>4.6.5.0 CP<extversion>4.9.1.0 GWE</extversion></version>
		<syntax>
			<rtype>int</rtype>
			<params>
				<param><type>object</type><name>pBase</name><desc>Basis, in der gekauft wird. Falls pObj einen CalcValue-Aufruf zur Verfügung stellt, wird dieser Parameter an den Aufruf weitergegeben.</desc><optional /></param>
				<param><type>int</type><name>iForPlayer</name><desc>Spieler, für den der Wert gilt. Falls pObj einen CalcValue-Aufruf zur Verfügung stellt, wird auch dieser Parameter an den Aufruf weitergegeben.</desc><optional /></param>
			</params>
		</syntax>
		<desc>Gibt einen Objekt- oder Definitionswert zurück.<br />Ein Objektwert berechnet sich folgendermaßen: Zunächst geprüft, ob eine CalcValue-Funktion im Script des Objekttyps vorhanden ist, und gegebenenfalls ausgewertet. Ansonsten wird der Definitionswert (siehe nächster Absatz) verwendet. Unabhängig davon wird der Wert des Objekts immer mit der Fertigstellung (<funclink>GetCon</funclink>()/100) multipliziert. Tote Lebewesen (<funclink>GetCategory</funclink>()&amp;<funclink>OCF_Living</funclink> &amp;&amp; !<funclink>GetAlive</funclink>()) haben immer den Wert 0.<br />Der Definitionswert wird folgendermaßen ermittelt: Ist eine CalcDefValue-Funktion im Script vorhanden, wird diese ausgewertet. Ansonsten wird eine Wertüberladung aus der Scenario.txt verwendet. Ist diese ebenfalls nicht vorhanden, wird der in der DefCore angegebene Wert benutzt.<br /></desc>
		<remark>Die beiden Parameter pBase und iForPlayer sind für szenarienspezifische Handelsmodelle gedacht, und werden nur in CalcValue/CalcDefValue-Aufrufen verwendet.</remark>
		<examples>
			<example>
<code>var iValue=GetValue();
<funclink>while</funclink> (iValue-->0) <funclink>CreateContents</funclink>(ROCK);
<funclink>RemoveObject</funclink>(true);</code>
				<text>Objektscript: Das Objekt erzeugt so viele Steine, wie es wert ist, und vernichtet sich dann selber (wobei es die Steine auswirft).</text>
			</example>
		</examples>
		<related>
			<funclink>GetWealth</funclink>
			<funclink>SetWealth</funclink>
		</related>
	</func>
	<author>Sven2</author><date>März 2003</date>
</funcs>
