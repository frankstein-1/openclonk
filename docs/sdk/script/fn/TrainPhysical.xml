<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!DOCTYPE funcs SYSTEM "../../../clonk.dtd">
<?xml-stylesheet type="text/xsl" href="../../../clonk.xsl"?>
<funcs>
        <func>
                <title>TrainPhysical</title>
                <category>Objekte</category><subcat>Status</subcat>
                <version>4.9.6.0 CR</version>
                <syntax>
                        <rtype>bool</rtype>
                        <params>
                                <param><type>string</type><name>physical</name><desc>Name Eigenschaft, die geändert werden soll</desc></param>
                                <param><type>int</type><name>train_by</name><desc>0-100000: Wert, um den trainiert wird</desc></param>
                                <param><type>int</type><name>max_train</name><desc>Wert, der durch das Training nie überschritten wird. Es wird allerdings in keinem Fall die Physical reduziert, auch wenn der Zielwert unter dem hier angegebenen Wert läge.<br /></desc></param>
			</params>
		</syntax>
                <desc>Erhöht den Wert der physischen Eigenschaft des aufrufenden Objekts um den in train_by angegebenen Wert. Mit diesem Aufruf werden sowohl die permanenten, als auch temporäre und temporär gestapelte Physicals trainiert. Dieser Befehl kann beispielsweise genutzt werden, um nach einem Zauber die Magiephysical zu trainieren.</desc>
		<examples>
			<example>
<code>// Globaler Aufruf, wenn ein Zauber erfolgreich war: Magie trainieren
global func OnClonkSucceededSpell(id spell, object clonk)
  {
  if (!clonk) if (!(clonk = <funclink>this</funclink>())) <funclink>return</funclink>(<funclink>_inherited</funclink>(spell));
  // Zauberkraft trainieren (plus 1/10 des Zauberwerts)
  if (!<funclink>ObjectCount</funclink>(NMGE))
    {
    var max_train, info;
    // Maximales Training bei Infoobjekten: Nach Ursprungsdefinition richten
    if (info = clonk-><funclink>GetObjectInfoCoreVal</funclink>("id", "ObjectInfo")) max_train = info->~MaxMagicPhysical();
    // Infodefinition hat kein MaxMagicPhysical (d.h., kein Zauberclonk) oder kein Infoobjekt vorhanden:
    // Training wird eh nicht permanent gesichert; nach aktueller Definition richten
    if (!max_train) max_train = clonk->~MaxMagicPhysical();
    // Trainieren
    clonk->TrainPhysical("Magic", <funclink>Value</funclink>(spell)/MCLK_ManaTrainRate, max_train);
    }
  // Gegebenenfalls weitere Hooks erlauben
  <funclink>return</funclink> (<funclink>_inherited</funclink>(spell, clonk));
  }</code>
				<text>Beispiel aus der System.c4g: Trainiert bei einem erfolgreichen Zauber die Magiephsical des Zauberers. Dabei wird sicher gestellt, dass der zaubernde Clonk nicht über das durch die Funktion MaxMagicPhysical() in seiner Definition angegebene Limit trainiert werden kann.</text>
			</example>
		</examples>
                <related>
			<emlink href="definition/defcore.html#SektionPhysical">DefCore.txt, [Physical]</emlink>
                        <funclink>GetPhysical</funclink>
                        <funclink>SetPhysical</funclink>
			<funclink>ResetPhysical</funclink>
                </related>
        </func>
        <author>Sven2</author><date>Juni 2003</date>
</funcs>

