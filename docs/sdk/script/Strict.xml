<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!DOCTYPE doc SYSTEM "../../clonk.dtd">
<?xml-stylesheet type="text/xsl" href="../../clonk.xsl"?>
<doc>
<title>#strict</title>
<h>#strict</h>
<part>
<text>Neu geschriebene Scripte sollten #strict sein. Dabei werden einige
Altlasten der Engine ignoriert und es können unter anderem strengere Typüberprüfungen angesetzt
werden. Scripte ohne #strict werden nur aus Gründen der Abwärtskompatibilität akzeptiert.</text>

<h id="Syntax">Deklaration</h>
<text>#strict muss als Direktive an den Anfang des Scriptes geschrieben werden. Bei #include und
#appendto gilt jeweils der Modus des Scriptes, zu dem includet/angehängt wird.</text>

<h>Auswirkungen</h>
<text><ul>
<li>Ein Funktionsaufruf auf denselben Funktionsnamen bedeutet immer einen rekursiven Aufruf</li>
<li><funclink>inherited</funclink>() und <funclink>_inherited</funclink>() werden verfügbar</li>
<li><funclink>goto</funclink>() impliziert kein <funclink>return</funclink>()</li>
<li><emlink href="script/Typechecks.html">Strengere Datentyp-Prüfung</emlink></li>
<li><funclink>CreateObject</funclink>() und <funclink>CreateConstruction</funclink>() überschreiben bei objektlokalem Aufruf nicht mehr den Besitzer</li>
</ul></text>
</part>
<h>#strict 2</h>
<part>
<text>Neu geschriebene Scripte sollten <code>#strict 2</code> sein. Dabei werden einige
Altlasten der Engine ignoriert und es können unter anderem strengere Typüberprüfungen angesetzt
werden. Scripte ohne <code>#strict 2</code> werden nur aus Gründen der Abwärtskompatibilität akzeptiert.</text>

<h>Deklaration</h>
<text><code>#strict 2</code> muss als Direktive an den Anfang des Scriptes geschrieben werden. Bei <code>#include</code> und
<code>#appendto</code> gilt jeweils der Modus des Scriptes, in dem die Funktion definiert wurde.</text>

<h>Auswirkungen</h>
<text><ul>
<li><code>&amp;&amp;</code> und <code>||</code> führen den zweiten Parameter nicht aus, wenn das Ergebnis schon nach Auswertung des ersten feststeht.</li>
<li><code>return</code>, <code>if</code> und <code>while</code> nehmen nur noch einen Parameter. Auch an anderen Stellen nimmt der Parser Ausdrücke nicht mehr an, vor denen früher nur gewarnt wurde.</li>
<li><code>==</code> und <code>!=</code> vergleichen nicht mehr die Identität von Werten, sondern ihren Inhalt und Typ. Beispielsweise gilt jetzt [1,2]==[2-1,2], "Hallo"=="Hallo" und CastInt(Clonk)!=Clonk.</li>
<li>Funktions- und Variablennamen dürfen nur noch die Zeichen a-z, A-Z und _, sowie 0-9 in der Mitte des Namens enthalten.</li>
<li><code>eq</code>, <code>ne</code>, <code>S=</code> gibt es nicht mehr. Man kann jetzt Funktionen und Variablen <code>eq</code> und <code>ne</code> nennen oder eine Variable namens <code>S</code> mit <code>S=42;</code> ändern.</li>
</ul></text>
</part>
<author>Sven2</author><date>Juli 2001</date>
<author>Günther</author><date>Dezember 2007</date>
</doc>
